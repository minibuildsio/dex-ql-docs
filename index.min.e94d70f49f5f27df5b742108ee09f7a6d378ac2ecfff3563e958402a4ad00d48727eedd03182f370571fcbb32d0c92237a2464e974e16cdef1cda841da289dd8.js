var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/introduction/getting-started/",title:"Getting Started",description:`DexQL is a query language to query a dataset and create a dashboard from the data. It is based on Kusto Query Language.
A DexQL script consists of statements that transform, filter, and summarise a data set. The statements are strung together by pipes similar to Unix pipes.
Example #date steps 2023-01-01 15568 2023-01-02 12473 \u0026hellip; \u0026hellip; The example script below reads from the Steps table, filters out rows before 2023-01-01, adds a calculated field called months then sums up steps by month.`,content:`DexQL is a query language to query a dataset and create a dashboard from the data. It is based on Kusto Query Language.
A DexQL script consists of statements that transform, filter, and summarise a data set. The statements are strung together by pipes similar to Unix pipes.
Example #date steps 2023-01-01 15568 2023-01-02 12473 \u0026hellip; \u0026hellip; The example script below reads from the Steps table, filters out rows before 2023-01-01, adds a calculated field called months then sums up steps by month.
Steps | where date \u0026gt;= '2023-07-03' | extend week = beginning_of_week(date) | summarise steps = sum(steps) by week `}),e.add({id:1,href:"/docs/introduction/",title:"Introduction",description:"Introduction",content:""}),e.add({id:2,href:"/docs/tabluar-expressions/",title:"Tabular Expressions",description:"Tabular Expressions",content:""}),e.add({id:3,href:"/docs/tabluar-expressions/project/",title:"project",description:`Convert an input row to an output row by keeping, dropping, or transforming rows.
Syntax #project Column [= Expression], ... Parameters #Name Type Required Description Column column Yes The column to appear in the output. Expression expression No An expression to calculate the value Example #The following example will create an output table with columns date identical to the input and distance calculated as 0.00075 * steps.`,content:`Convert an input row to an output row by keeping, dropping, or transforming rows.
Syntax #project Column [= Expression], ... Parameters #Name Type Required Description Column column Yes The column to appear in the output. Expression expression No An expression to calculate the value Example #The following example will create an output table with columns date identical to the input and distance calculated as 0.00075 * steps.
Steps | project date, distance = steps * 0.00075 `}),e.add({id:4,href:"/docs/tabluar-expressions/render/",title:"render",description:`Render the input table as a visualisation for example a chart.
Syntax #render Type [with PropertyName = PropertyValue, ...] Parameters #Name Type Required Description Type enum Yes The type of visualisation linechart, barchart, or table. PropertyName name No The name of a property to pass to the render e.g. title. PropertyValue string or int No The value of the property. Example #The following example will render the input table as a line chart with a title of \u0026ldquo;Step Chart\u0026rdquo;.`,content:`Render the input table as a visualisation for example a chart.
Syntax #render Type [with PropertyName = PropertyValue, ...] Parameters #Name Type Required Description Type enum Yes The type of visualisation linechart, barchart, or table. PropertyName name No The name of a property to pass to the render e.g. title. PropertyValue string or int No The value of the property. Example #The following example will render the input table as a line chart with a title of \u0026ldquo;Step Chart\u0026rdquo;.
Steps | render linechart with title = \u0026quot;Step Chart\u0026quot; `}),e.add({id:5,href:"/docs/tabluar-expressions/sort/",title:"sort",description:`Sort the rows in a table by a given column optionally specifying a direction.
Syntax #sort Column [Order] Parameters #Name Type Required Description Column column Yes The column to sort the table by. Order asc or desc No The order to sort by, defaults to asc i.e. low to high. Example #The following example will sort the table by the date column in descending order i.e. most recent first.`,content:`Sort the rows in a table by a given column optionally specifying a direction.
Syntax #sort Column [Order] Parameters #Name Type Required Description Column column Yes The column to sort the table by. Order asc or desc No The order to sort by, defaults to asc i.e. low to high. Example #The following example will sort the table by the date column in descending order i.e. most recent first.
Steps | sort steps desc `}),e.add({id:6,href:"/docs/tabluar-expressions/summarise/",title:"summarise",description:`Summarise using aggregation function and a group.
Syntax #summarise Column = Aggregation(Expression)[, ...] by Column Parameters #Name Type Required Description Column 1 column Yes The new column to create. Column 2 column Yes The column to group by. Aggregation aggregation Yes The aggregation function such as sum(), avg(), etc. Expression expression Depends on Aggregation The expression to aggregate. Supported Aggregations #Aggregation Description count() Count of the number of items dcount(expression) Count of the number of unique items sum(expression) Sum of the values of a given expression avg(expression) Average (mean) of the values of a given expression min(expression) Minimum of the values of a given expression max(expression) Maximum of the values of a given expression Example #The following example will create a table of total steps and total distance by month.`,content:`Summarise using aggregation function and a group.
Syntax #summarise Column = Aggregation(Expression)[, ...] by Column Parameters #Name Type Required Description Column 1 column Yes The new column to create. Column 2 column Yes The column to group by. Aggregation aggregation Yes The aggregation function such as sum(), avg(), etc. Expression expression Depends on Aggregation The expression to aggregate. Supported Aggregations #Aggregation Description count() Count of the number of items dcount(expression) Count of the number of unique items sum(expression) Sum of the values of a given expression avg(expression) Average (mean) of the values of a given expression min(expression) Minimum of the values of a given expression max(expression) Maximum of the values of a given expression Example #The following example will create a table of total steps and total distance by month.
Steps | project steps, month = beginning_of_month(date) | summarise steps = sum(steps), distance = sum(0.00075 * steps) by month `}),e.add({id:7,href:"/docs/tabluar-expressions/take/",title:"take",description:`Return up to a specified number of rows.
Syntax #take N Parameters #Name Type Required Description N int Yes Maximum number of rows to return Example #The following example will return the first 10 rows from the \u0026ldquo;Steps\u0026rdquo;, if there are fewer than 10 rows in the table all rows will be returned.
Steps | take 10 `,content:`Return up to a specified number of rows.
Syntax #take N Parameters #Name Type Required Description N int Yes Maximum number of rows to return Example #The following example will return the first 10 rows from the \u0026ldquo;Steps\u0026rdquo;, if there are fewer than 10 rows in the table all rows will be returned.
Steps | take 10 `}),e.add({id:8,href:"/docs/tabluar-expressions/where/",title:"where",description:`Select all rows where the provided condition is true.
Syntax #where Condition Parameters #Name Type Required Description Condition expression Yes Expression that evaluates to true or false. Example #The following example will return rows where the steps count is 15,000 or more from the current month.
Steps | where steps \u0026gt;= 15000 and date \u0026gt;= beginning_of_the_month() `,content:`Select all rows where the provided condition is true.
Syntax #where Condition Parameters #Name Type Required Description Condition expression Yes Expression that evaluates to true or false. Example #The following example will return rows where the steps count is 15,000 or more from the current month.
Steps | where steps \u0026gt;= 15000 and date \u0026gt;= beginning_of_the_month() `}),e.add({id:9,href:"/docs/",title:"Docs",description:"Docs Doks.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()